#_______________________________________________________________________________
# Preparação de Dados para Análise Semanal das Bolsas de Valores
# Autor: Alexandre Barros
# Data: ~/01/2023
#_______________________________________________________________________________
# Pacotes ----------------------------------------------------------------------
library(tidyverse)
library(yfR)
# Configuração de diretório
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#-- Variáveis-níveis
semana <- c("segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira")
bolsas <- c("Ibovespa", "S&P 500", "Dow Jones", "FTSE100", "DAX", "Xangai/SSEC")
#-- Argumentos da função
indices <- c(
"^BVSP"    # ! Ibovespa
,  "^GSPC"    # ! S&P 500
,  "^DJI"     # ! Dow Jones
,  "^FTSE"    # ! FTSE100
,  "^GDAXI"   # ! DAX
,  "000001.SS"# ! Xangai/SSEC
)
data_inicial <- as.Date("2023-07-07")
data_final <- as.Date("2023-07-14")
#-- Importando a base de dados
df_yf <- yf_get(tickers = indices,
first_date = data_inicial,
last_date = data_final)
unique(df_yf$ticker)
#-- DF para o gráfico
df_sum <- df_yf %>%
mutate(
Bolsa = case_when(
ticker == "^BVSP" ~ "Ibovespa"
,      ticker == "^GSPC" ~ "S&P 500"
,      ticker == "^DJI"  ~ "Dow Jones"
,      ticker == "^FTSE" ~ "FTSE100"
,      ticker == "^GDAXI"~ "DAX"
,      ticker == "000001.SS" ~ "Xangai/SSEC"
),
Valor = round(ret_closing_prices, 4),
Dia = factor(weekdays(ref_date), levels = semana),
#-- Condicionais
vjust = ifelse(Valor > 0, 1.3, -0.5),
colour = ifelse(Valor < 0, F, T),
Bolsa = factor(Bolsa, levels = bolsas)
)
# Salvando os dados processados ------------------------------------------------
df_sum
write.csv(df_sum, "data/processed_stock_data.csv")
#_______________________________________________________________________________
# Análise e Visualização do Desempenho Semanal das Bolsas de Valores
# Autor: Alexandre Barros
# Data: /01/2023
#_______________________________________________________________________________
# Carregamento de pacotes ------------------------------------------------------
library(tidyverse)
library(ggthemes)
library(gganimate)
# Configuração de diretório ----------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./RStats - Radar Macro Def.R")
# Ajustes manuais em dados específicos
df_sum[1, 6] <- 108078
df_sum[6, 6] <- 33869
df_sum[11, 6] <- 7893
df_sum[16, 6] <- 15307
df_sum[21, 6] <- 4090
df_sum[26, 6] <- 3260
df_sum <- df_sum %>%
mutate(day = case_when(
ref_date == as.Date("2023-02-06") ~ 1,
ref_date == as.Date("2023-02-07") ~ 2,
ref_date == as.Date("2023-02-08") ~ 3,
ref_date == as.Date("2023-02-09") ~ 4,
ref_date == as.Date("2023-02-10") ~ 5
)) %>% na.omit()
# Criação do gráfico principal -------------------------------------------------
df_sum2 <- filter(df_sum, ref_date == as.Date("2023-07-07"))
# -- plot
{
plot <- ggplot(df_sum2, aes(Bolsa, Valor, vjust = vjust)) +
geom_bar(stat = "identity", aes(fill = colour), width = 0.5) +
labs(x = "", y = "") +
scale_x_discrete(breaks = NULL) +
theme_bw() +
ggtitle("") +
geom_text(aes(label = Bolsa, y = 0),
size = 3.6,
fontface = "bold")
#-- Adicionando os rótulos
plot <- plot +
geom_text(aes(label = scales::percent(Valor),
y = Valor),
position = position_dodge(1.1),
vjust = ifelse(df_sum2$Valor > 0, -1.05, 1.5),
size = 3.3,
color = "#04225a",
fontface = "bold")
#-- Alterando o tema
plot <- plot +
scale_y_continuous(labels = NULL, breaks = NULL) +
scale_fill_manual(values=c("#FF0000", "#00B04C")) +
#scale_fill_manual(values=c( "#00B04C" , "#FF0000" )) +
coord_cartesian(clip = "off") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text =  element_text(size = 13),
legend.position = "none")
}
#-- Salvando o gráfico em PNG
ggsave("data/radar5.png", plot, dpi = 200, height = 4.1, width = 5.3)
# Visualização e debug
plot
g
# -- plot
{
plot <- ggplot(df_sum2, aes(Bolsa, Valor, vjust = vjust)) +
geom_bar(stat = "identity", aes(fill = colour), width = 0.5) +
labs(x = "", y = "") +
scale_x_discrete(breaks = NULL) +
theme_bw() +
ggtitle("") +
geom_text(aes(label = Bolsa, y = 0),
size = 3.6,
fontface = "bold")
#-- Adicionando os rótulos
plot <- plot +
geom_text(aes(label = scales::percent(Valor),
y = Valor),
position = position_dodge(1.1),
vjust = ifelse(df_sum2$Valor > 0, -1.05, 1.5),
size = 3.3,
color = "#04225a",
fontface = "bold")
#-- Alterando o tema
plot <- plot +
scale_y_continuous(labels = NULL, breaks = NULL) +
scale_fill_manual(values=c("#FF0000", "#00B04C")) +
#scale_fill_manual(values=c( "#00B04C" , "#FF0000" )) +
coord_cartesian(clip = "off") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text =  element_text(size = 13),
legend.position = "none")
}
plot
# -- plot
{
plot <- ggplot(df_sum2, aes(Bolsa, Valor, vjust = vjust)) +
geom_bar(stat = "identity", aes(fill = colour), width = 0.5) +
labs(x = "", y = "") +
scale_x_discrete(breaks = NULL) +
theme_bw() +
ggtitle("") +
geom_text(aes(label = Bolsa, y = 0),
size = 3.6,
fontface = "bold")
#-- Adicionando os rótulos
plot <- plot +
geom_text(aes(label = scales::percent(Valor),
y = Valor),
position = position_dodge(1.1),
vjust = ifelse(df_sum2$Valor > 0, -1.05, 1.5),
size = 3.3,
color = "#04225a",
fontface = "bold")
#-- Alterando o tema
plot <- plot +
scale_y_continuous(labels = NULL, breaks = NULL) +
scale_fill_manual(values=c("#FF0000", "#00B04C")) +
#scale_fill_manual(values=c( "#00B04C" , "#FF0000" )) +
coord_cartesian(clip = "off") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text =  element_text(size = 13),
legend.position = "none")
plot
}
source("./RStats - Radar Macro Def.R")
# Ajustes manuais em dados específicos
df_sum[1, 6] <- 108078
df_sum <- df_sum %>%
mutate(day = case_when(
ref_date == as.Date("2023-02-06") ~ 1,
ref_date == as.Date("2023-02-07") ~ 2,
ref_date == as.Date("2023-02-08") ~ 3,
ref_date == as.Date("2023-02-09") ~ 4,
ref_date == as.Date("2023-02-10") ~ 5
)) %>% na.omit()
# Criação do gráfico principal -------------------------------------------------
df_sum2 <- filter(df_sum, ref_date == as.Date("2023-07-07"))
# -- plot
{
plot <- ggplot(df_sum2, aes(Bolsa, Valor, vjust = vjust)) +
geom_bar(stat = "identity", aes(fill = colour), width = 0.5) +
labs(x = "", y = "") +
scale_x_discrete(breaks = NULL) +
theme_bw() +
ggtitle("") +
geom_text(aes(label = Bolsa, y = 0),
size = 3.6,
fontface = "bold")
#-- Adicionando os rótulos
plot <- plot +
geom_text(aes(label = scales::percent(Valor),
y = Valor),
position = position_dodge(1.1),
vjust = ifelse(df_sum2$Valor > 0, -1.05, 1.5),
size = 3.3,
color = "#04225a",
fontface = "bold")
#-- Alterando o tema
plot <- plot +
scale_y_continuous(labels = NULL, breaks = NULL) +
scale_fill_manual(values=c("#FF0000", "#00B04C")) +
#scale_fill_manual(values=c( "#00B04C" , "#FF0000" )) +
coord_cartesian(clip = "off") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text =  element_text(size = 13),
legend.position = "none")
plot
}
df_sum2
unique(df_yf$ticker)
#_______________________________________________________________________________
# Preparação de Dados para Análise Semanal das Bolsas de Valores
# Autor: Alexandre Barros
# Data: ~/01/2023
#_______________________________________________________________________________
# Pacotes ----------------------------------------------------------------------
library(tidyverse)
library(yfR)
# Configuração de diretório
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#-- Variáveis-níveis
semana <- c("segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira")
bolsas <- c("Ibovespa", "S&P 500", "Dow Jones", "FTSE100", "DAX", "Xangai/SSEC")
#-- Argumentos da função
indices <- c(
"^BVSP"    # ! Ibovespa
,  "^GSPC"    # ! S&P 500
,  "^DJI"     # ! Dow Jones
,  "^FTSE"    # ! FTSE100
,  "^GDAXI"   # ! DAX
,  "000001.SS"# ! Xangai/SSEC
)
data_inicial <- as.Date("2023-07-07")
data_final <- as.Date("2023-07-14")
#-- Importando a base de dados
df_yf <- yf_get(tickers = indices,
first_date = data_inicial,
last_date = data_final)
unique(df_yf$ticker)
#-- DF para o gráfico
df_sum <- df_yf %>%
mutate(
Bolsa = case_when(
ticker == "^BVSP" ~ "Ibovespa"
,      ticker == "^GSPC" ~ "S&P 500"
,      ticker == "^DJI"  ~ "Dow Jones"
,      ticker == "^FTSE" ~ "FTSE100"
,      ticker == "^GDAXI"~ "DAX"
,      ticker == "000001.SS" ~ "Xangai/SSEC"
),
Valor = round(ret_closing_prices, 4),
Dia = factor(weekdays(ref_date), levels = semana),
#-- Condicionais
vjust = ifelse(Valor > 0, 1.3, -0.5),
colour = ifelse(Valor < 0, F, T),
Bolsa = factor(Bolsa, levels = bolsas)
)
# Salvando os dados processados ------------------------------------------------
df_sum
write.csv(df_sum, "data/processed_stock_data.csv")
View(df_sum)
# Criação do gráfico principal -------------------------------------------------
df_sum2 <- filter(df_sum, ref_date == as.Date("2023-07-07"))
View(df_sum2)
# Criação do gráfico principal -------------------------------------------------
df_sum2 <- filter(df_sum, ref_date == as.Date("2023-07-08"))
# Criação do gráfico principal -------------------------------------------------
df_sum2 <- filter(df_sum, ref_date == as.Date("2023-07-010"))
# Criação do gráfico principal -------------------------------------------------
df_sum2 <- filter(df_sum, ref_date == as.Date("2023-07-10"))
# -- plot
{
plot <- ggplot(df_sum2, aes(Bolsa, Valor, vjust = vjust)) +
geom_bar(stat = "identity", aes(fill = colour), width = 0.5) +
labs(x = "", y = "") +
scale_x_discrete(breaks = NULL) +
theme_bw() +
ggtitle("") +
geom_text(aes(label = Bolsa, y = 0),
size = 3.6,
fontface = "bold")
#-- Adicionando os rótulos
plot <- plot +
geom_text(aes(label = scales::percent(Valor),
y = Valor),
position = position_dodge(1.1),
vjust = ifelse(df_sum2$Valor > 0, -1.05, 1.5),
size = 3.3,
color = "#04225a",
fontface = "bold")
#-- Alterando o tema
plot <- plot +
scale_y_continuous(labels = NULL, breaks = NULL) +
scale_fill_manual(values=c("#FF0000", "#00B04C")) +
#scale_fill_manual(values=c( "#00B04C" , "#FF0000" )) +
coord_cartesian(clip = "off") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
strip.text =  element_text(size = 13),
legend.position = "none")
plot
}
# Gráfico animado - Teste ------------------------------------------------------
g <- ggplot(df_sum, aes(ref_date, price_close)) +
geom_line(color = '#4364E8') +
labs(x = 'Data', y = 'Preço de Fechamento', title = 'Ibov: Desempenho Semanal', subtitle = 'Bovespa',
caption = 'Dados do Yahoo Finance') +
theme_wsj() +
gganimate::transition_reveal(ref_date)
g
# Salvando a animação como GIF
anim_save("data/grafico_animado.gif", animation = g)
# Carregamento de pacotes ------------------------------------------------------
install.packages("transformr")  # Dependência para interpolações suaves
install.packages("gifski")  # Para renderizar GIFs
# Gráfico animado - Teste ------------------------------------------------------
df_sum$ref_date <- as.Date(df_sum$ref_date)
# Criando o gráfico animado
g <- ggplot(df_sum, aes(ref_date, price_close)) +
geom_line(color = '#4364E8') +
labs(x = 'Data', y = 'Preço de Fechamento', title = 'Ibov: Desempenho Semanal', subtitle = 'Bovespa',
caption = 'Dados do Yahoo Finance') +
theme_wsj() +
gganimate::transition_reveal(ref_date)
# Verifique visualmente a animação no RStudio para confirmar que ela está funcionando
anim_save("data/grafico_animado.gif", animation = g)
# Criando o gráfico animado
g <- ggplot(df_sum, aes(ref_date, price_close)) +
geom_line(color = '#4364E8') +
labs(x = 'Data', y = 'Preço de Fechamento', title = 'Ibov: Desempenho Semanal', subtitle = 'Bovespa',
caption = 'Dados do Yahoo Finance') +
theme_wsj() +
gganimate::transition_reveal(ref_date)
i
# Verifique visualmente a animação no RStudio para confirmar que ela está funcionando
save_animation("data/grafico_animado.gif", animation = g)
