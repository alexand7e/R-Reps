install.packages('gganimate')
library(ggplot2)
library(gganimate)
theme_set(theme_bw())
library(gapminder)
install.packages('gapminder')
library(gapminder)
# install.packages('gapminder')
library(ggplot2)
library(gganimate)
theme_set(theme_bw())
library(gapminder)
head(gapminder)
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
p + transition_time(year) +
labs(title = "Year: {frame_time}")
p_continent = p + facet_wrap(~continent) +
transition_time(year) +
labs(title = "Year: {frame_time}")
p
p
p + transition_time(year) +
labs(title = "Year: {frame_time}")
p_line <- ggplot(
airquality,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top")
p_line
p_line <- ggplot(
gdpPercap,
aes(Day, Temp, group = Month, color = factor(Month))
) +
geom_line() +
scale_color_viridis_d() +
labs(x = "Day of Month", y = "Temperature") +
theme(legend.position = "top")
airquality
gapminder
head(gapminder)
# Instalar o pacote gapminder caso não esteja instalado
# install.packages('gapminder')
# Carregar os pacotes necessários
library(ggplot2)
library(gganimate)
library(gapminder)
# Configurar o tema padrão para os gráficos
theme_set(theme_bw())
# Visualizar as primeiras linhas do conjunto de dados gapminder
head(gapminder)
# Criar um gráfico de pontos para explorar a relação entre o PIB per capita e a expectativa de vida,
# onde o tamanho dos pontos é proporcional à população e a cor representa o país.
p <- ggplot(
gapminder,
aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +  # Pontos sem legenda e parcialmente transparentes
scale_color_viridis_d() +  # Escala de cores viridis
scale_size(range = c(2, 12)) +  # Intervalo de tamanhos para os pontos
scale_x_log10() +  # Escala logarítmica para o eixo x (PIB per capita)
labs(x = "PIB per capita", y = "Expectativa de vida")  # Rótulos dos eixos
# Adicionar uma animação de tempo ao gráfico, exibindo a mudança ao longo dos anos
p + transition_time(year) +
labs(title = "Ano: {frame_time}")  # Título dinâmico que mostra o ano da frame
# Criar uma versão do gráfico com separação por continentes usando facet_wrap
p + facet_wrap(~continent) +
transition_time(year) +
labs(title = "Ano: {frame_time}")  # Título dinâmico com o ano
# Exibir o gráfico estático
p
# Criar uma versão do gráfico com separação por continentes usando facet_wrap
p + facet_wrap(~continent) +
transition_time(year) +
labs(title = "Ano: {frame_time}")  # Título dinâmico com o ano
# Filtrar dados para o Brasil
brasil_data <- gapminder %>%
filter(country == "Brazil")
library(ggplot2)
library(gapminder)
# Filtrar dados para o Brasil
brasil_data <- gapminder %>%
filter(country == "Brazil")
library(ggplot2)
library(gapminder)
# Filtrar dados para o Brasil
brasil_data <- gapminder %>%
filter(country == "Brazil")
library(magrittr)
# Filtrar dados para o Brasil
brasil_data <- gapminder %>%
filter(country == "Brazil")
gapminder
# Filtrar dados para o Brasil
brasil_data <- gapminder %>%
filter(gapminder$country == "Brazil")
# Criar gráfico de linha para a expectativa de vida ao longo dos anos no Brasil
p_brasil_lifeExp <- ggplot(brasil_data, aes(x = year, y = lifeExp)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 3, shape = 21, fill = "white") +
labs(title = "Expectativa de Vida no Brasil ao Longo dos Anos",
x = "Ano",
y = "Expectativa de Vida") +
theme_minimal()
# Criar gráfico de linha para a expectativa de vida ao longo dos anos no Brasil
p_brasil_lifeExp <- ggplot(brasil_data, aes(x = year, y = lifeExp)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 3, shape = 21, fill = "white") +
labs(title = "Expectativa de Vida no Brasil ao Longo dos Anos",
x = "Ano",
y = "Expectativa de Vida") +
theme_minimal()
# Criar gráfico de linha para a expectativa de vida ao longo dos anos no Brasil
p_brasil_lifeExp <- ggplot(brasil_data, aes(x = year, y = gdpPercap)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 3, shape = 21, fill = "white") +
labs(title = "Expectativa de Vida no Brasil ao Longo dos Anos",
x = "Ano",
y = "Expectativa de Vida") +
theme_minimal()
# Exibir o gráfico
p_brasil_lifeExp
# Criar gráfico de linha para a expectativa de vida ao longo dos anos no Brasil
p_brasil_lifeExp <- ggplot(brasil_data, aes(x = year, y = gdpPercap)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 3, shape = 21, fill = "white") +
labs(title = "Expectativa de Vida no Brasil ao Longo dos Anos",
x = "Ano",
y = "Expectativa de Vida") +
theme_minimal()
# Criar gráfico de linha para a expectativa de vida ao longo dos anos no Brasil
p_brasil_lifeExp <- ggplot(brasil_data, aes(x = year, y = gdpPercap)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 3, shape = 21, fill = "white") +
labs(title = "Expectativa de Vida no Brasil ao Longo dos Anos",
x = "Ano",
y = "Expectativa de Vida") +
theme_minimal()
# Supondo que brasil_data seja um data.frame e queremos converter
brasil_lifeExp_ts <- ts(brasil_data$lifeExp, start = min(brasil_data$year), frequency = 1)
# Similarmente para o PIB per capita
brasil_gdpPercap_ts <- ts(brasil_data$gdpPercap, start = min(brasil_data$year), frequency = 1)
brasil_data
# Filtrar dados para o Brasil
brasil_data <- filter(gapminder$country == "Brazil")
# Filtrar dados para o Brasil
brasil_data <- filter(gapminder, gapminder$country == "Brazil")
gapminder
# Filtrar dados para o Brasil
brasil_data <- filter(gapminder, gapminder$country == "Brazil")
# Filtrar dados para o Brasil
brasil_data <- filter(gapminder, gapminder$country == "Brasil")
brasil_data
gapminder
subset(gapminder, gapminder$country == "Brasil")
subset(gapminder, gapminder$country == "Brasil")
subset(gapminder, gapminder$country == "Brasil")
subset(gapminder, gapminder$country == "Brazil")
# Filtrar dados para o Brasil
brasil_data <- subset(gapminder, gapminder$country == "Brazil")
# Criar gráfico de linha para a expectativa de vida ao longo dos anos no Brasil
p_brasil_lifeExp <- ggplot(brasil_data, aes(x = year, y = gdpPercap)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 3, shape = 21, fill = "white") +
labs(title = "Expectativa de Vida no Brasil ao Longo dos Anos",
x = "Ano",
y = "Expectativa de Vida") +
theme_minimal()
# Exibir o gráfico
p_brasil_lifeExp
p_brasil_trajectory <- ggplot(brasil_data, aes(x = gdpPercap, y = lifeExp, size = pop)) +
geom_point(aes(color = year), alpha = 0.7) +
scale_color_viridis_c(option = "D", begin = 0.3, end = 0.7, direction = 1, guide = "none") +
scale_size(range = c(3, 10)) +
scale_x_log10() +
labs(title = "Trajetória do Brasil: PIB per Capita vs. Expectativa de Vida",
x = "PIB per Capita (log)",
y = "Expectativa de Vida") +
theme_minimal()
# Exibir o gráfico
print(p_brasil_trajectory)
# Exibir o gráfico
p_brasil_trajectory
p <- ggplot(
brasil_data,
aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "PIB per capita", y = "Expectativa de vida")
p
p
p <- ggplot(
brasil_data,
aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "PIB per capita", y = "Expectativa de vida")
p
p + transition_time(year) +
labs(title = "Ano: {frame_time}")
p + transition_time(year) +
labs(title = "Ano: {frame_time}") +
shadow_wake(wake_length = 0.1, alpha = FALSE)
library(geobr)
# Lista de pacotes necessários
pacotes_necessarios <- c("geobr", "tidyverse", "sidrar")
# Verificar e instalar pacotes que não estão instalados
for (pacote in pacotes_necessarios) {
if (!require(pacote, character.only = TRUE)) {
install.packages(pacote)
library(pacote, character.only = TRUE)
}
}
# Pacotes
library(sidrar)
library(tidyverse)
library(geobr)
# Importação dos dados do PIB dos municípios no estado do Piauí (PI)
df_pib_muni <- sidrar::get_sidra(api = 5938,
variable = 37,
period = c('2021', '2020', '2019'),
geo = "City",
geo.filter = list("State" = "PI"))
# Importação dos dados do PIB dos municípios no estado do Piauí (PI)
df_pib_muni <- sidrar::get_sidra(5938,
variable = 37,
period = c('2021', '2020', '2019'),
geo = "City",
geo.filter = list("State" = "PI"))
# Importação dos dados do PIB dos municípios no estado do Piauí (PI)
df_pib_muni <- sidrar::get_sidra(5938,
variable = 37,
period = c('2021', '2020', '2019'),
geo = "City",
geo.filter = list("State" = 22))
# Importação dos dados do PIB do estado do Piauí (PI)
df_pib_state <- sidrar::get_sidra(5938,
variable = 37,
period = c('2021', '2020', '2019'),
geo = "State",
geo.filter = list("State" = 22))
View(df_pib_state)
View(brasil_data)
View(df_pib_muni)
df_pib_muni
head(df_pib_muni)
head(df_pib_state)
library(ggplot2)
source('./Sidra-PIB-municipal.r')
# Selecionando aleatoriamente um município
random_municipio <- df_pib_muni %>%
sample_n(1)  # Seleciona 1 município aleatoriamente
# Verificando qual município foi escolhido
print(random_municipio$Município)
# Filtrando dados para o município selecionado
selected_municipio_pib <- df_pib_muni %>%
filter(Município == random_municipio$Município)
# Gráfico de linha para evolução do PIB
ggplot(selected_municipio_pib, aes(x = as.factor(Ano), y = Valor, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "red", size = 3) +
labs(title = paste("Evolução do PIB de", random_municipio$Município, "(2019-2021)"),
x = "Ano",
y = "PIB (em Mil Reais)") +
theme_minimal()
# Filtrando dados para 2021
pib_2021_muni <- df_pib_muni %>%
filter(Ano == 2021)
pib_2021_state <- df_pib_state %>%
filter(Ano == 2021)
# Gráfico de barras comparando PIB de 2021 entre municípios e o estado
pib_comparative <- rbind(
pib_2021_muni %>%
mutate(Type = "Município"),
pib_2021_state %>%
mutate(Município = "Total Piauí", Type = "Estado")
)
# Gráfico de linha para a evolução do PIB de todos os municípios
ggplot(df_pib_muni, aes(x = as.factor(Ano), y = Valor, group = Município, color = Município)) +
geom_line(alpha = 0.5) +
geom_point(alpha = 0.5) +
labs(title = "Evolução do PIB ao Longo dos Anos para Todos os Municípios",
x = "Ano",
y = "PIB (em Mil Reais)") +
theme_minimal() +
theme(legend.position = "none")
# Preparando dados para os top 5 municípios em cada ano
top_municipios_por_ano <- df_pib_muni %>%
group_by(Ano) %>%
slice_max(order_by = Valor, n = 5) %>%
ungroup()
# Gráfico de barras para os top 5 municípios em cada ano
ggplot(top_municipios_por_ano, aes(x = reorder(Município, Valor), y = Valor, fill = as.factor(Ano))) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~Ano) +
labs(title = "Top 5 Municípios por PIB em Cada Ano",
x = "Município",
y = "PIB (em Mil Reais)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "bottom")
pib_comparative <- df_pib_muni %>%
rbind(
df_pib_state %>%
mutate(Município = "Total Piauí", Type = "Estado")
) %>%
mutate(Type = ifelse(is.na(Type), "Estado", "Município"))
df_pib_state <- df_pib_state %>%
mutate(Município = "Total Piauí", Type = "Estado")
df_pib_muni <- df_pib_muni %>%
mutate(Type = "Município")
pib_comparative <- bind_rows(df_pib_muni, df_pib_state)
# Criando o gráfico
ggplot(pib_comparative, aes(x = as.factor(Ano), y = Valor, group = Município, color = Município)) +
geom_line() +
geom_point() +
facet_wrap(~Type, scales = "free_y") +
labs(title = "Comparação do PIB entre Municípios e o Total do Estado do Piauí",
x = "Ano",
y = "PIB (em Mil Reais)") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank())
pib_comparative <- bind_rows(subset(df_pib_muni, Município == random_municipio$Município), df_pib_state)
# Criando o gráfico
ggplot(pib_comparative, aes(x = as.factor(Ano), y = Valor, group = Município, color = Município)) +
geom_line() +
geom_point() +
facet_wrap(~Type, scales = "free_y") +
labs(title = "Comparação do PIB entre Municípios e o Total do Estado do Piauí",
x = "Ano",
y = "PIB (em Mil Reais)") +
theme_minimal() +
theme(legend.position = "bottom", legend.title = element_blank())
